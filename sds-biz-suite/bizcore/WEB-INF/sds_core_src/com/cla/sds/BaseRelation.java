/*
******************************           DO NOT EDIT THIS FILE!!!           				*********************************
******************************         Please edit CustomRelation.java instead!        		*********************************	
******************************         不要编辑这个文件，这个文件每次都会被机器人覆盖!!!              *********************************
******************************    CustomRelation.java专门用于定制，该文件存在的时候不会被覆盖      	*********************************


*/
package com.cla.sds;
import java.util.HashMap;
import java.util.Map;

public class BaseRelation{

	
	Map<String, String> relationMapping ;
	
	public String getRelation(String fromType, String fromId, String targetField, String targetId)
	{
		//the entry for external calls, ugly code with many path just works, using a map is fine but lose the way to override the methods
		
		if(relationMapping == null){
			prepareRelation();
		}

		String key = fromType+"->"+targetField;
		
		String relation = relationMapping.get(key);
		if(relation == null){
			throw new IllegalArgumentException("Not able to find any relation to the target type: "+ targetField);
		}
		return relation;
		
	}
	
	protected void addGenericRelation(String fromType, String relation,String targetField)
	{
		if(relationMapping == null){
			relationMapping = new HashMap<String,String>();
		}
		String key = fromType.trim()+"->"+targetField.trim();
		relationMapping.put(key, relation);
	}
	protected void replaceGenericRelation(String fromType, String relation,String targetField)
	{
		addGenericRelation( fromType, relation, targetField );
	}
	
	
	
	Map<String, String[]> relationIndex ;
	protected void addRelationIndex(String fromType,String related[])
	{
		if(relationIndex == null){
			relationIndex = new HashMap<String,String[]>();
		}
		
		relationIndex.put(fromType, related);
	}
	protected void replaceRelationIndex(String fromType,String related[])
	{
		addRelationIndex( fromType, related);
	}
	
	public String getTableFieldName(String expr){
		//the expr looks like owner:DecorationAccelerator
		String[] splitedValues = expr.split(":");
		if(splitedValues.length < 1){
			throw new IllegalArgumentException("Not able to split expr: "+expr);
		}
		
		return splitedValues[0];
	}
	public String getBeanFieldName(String expr){
		//the expr looks like owner:DecorationAccelerator
		String[] splitedValues = getTableFieldName(expr).split("_");
		String ret = splitedValues[0];
		for(int i=1;i<splitedValues.length;i++){
			
			ret = ret+splitedValues[i].substring(0,1).toUpperCase()+splitedValues[i].substring(1);
			
		}
		
		return ret;
	}
	public String getFieldType(String expr){
		//the expr looks like owner:DecorationAccelerator
		String[] splitedValues = expr.split(":");
		if(splitedValues.length < 2){
			throw new IllegalArgumentException("Not able to split expr: "+expr);
		}
		
		return splitedValues[1];
	}
	public String [] getRelationIndex(String type){
		
		if(relationIndex == null){
			prepareRelationIndex();
		}
		
		String relations [] =relationIndex.get(type);
		if(relations == null){
			//throw new IllegalArgumentException("Not able to find related objects for type: "+ type);
		}
		return relations;
	}
	
	protected void prepareRelationIndex()
	{
		
		
		String [] companyRelatedObjectNames = {"platform:Platform"};
		addRelationIndex("Company",companyRelatedObjectNames);

		String [] userRelatedObjectNames = {"company:Company"};
		addRelationIndex("User",userRelatedObjectNames);

		String [] userProjectRelatedObjectNames = {"user:User","project:Project"};
		addRelationIndex("UserProject",userProjectRelatedObjectNames);

		String [] changeRequestTypeRelatedObjectNames = {"platform:Platform"};
		addRelationIndex("ChangeRequestType",changeRequestTypeRelatedObjectNames);

		String [] changeRequestRelatedObjectNames = {"request_type:ChangeRequestType","platform:Platform"};
		addRelationIndex("ChangeRequest",changeRequestRelatedObjectNames);

		String [] eventUpdateProfileRelatedObjectNames = {"change_request:ChangeRequest"};
		addRelationIndex("EventUpdateProfile",eventUpdateProfileRelatedObjectNames);

		String [] projectRelatedObjectNames = {"company:Company"};
		addRelationIndex("Project",projectRelatedObjectNames);

		String [] pageFlowSpecRelatedObjectNames = {"owner:User","project:Project"};
		addRelationIndex("PageFlowSpec",pageFlowSpecRelatedObjectNames);

		String [] workFlowSpecRelatedObjectNames = {"owner:User","project:Project"};
		addRelationIndex("WorkFlowSpec",workFlowSpecRelatedObjectNames);

		String [] changeRequestSpecRelatedObjectNames = {"owner:User","project:Project"};
		addRelationIndex("ChangeRequestSpec",changeRequestSpecRelatedObjectNames);

		String [] pageContentSpecRelatedObjectNames = {"owner:User","project:Project"};
		addRelationIndex("PageContentSpec",pageContentSpecRelatedObjectNames);

		String [] pageRelatedObjectNames = {"page_type:PageType","mobile_app:MobileApp"};
		addRelationIndex("Page",pageRelatedObjectNames);

		String [] pageTypeRelatedObjectNames = {"mobile_app:MobileApp"};
		addRelationIndex("PageType",pageTypeRelatedObjectNames);

		String [] slideRelatedObjectNames = {"page:Page"};
		addRelationIndex("Slide",slideRelatedObjectNames);

		String [] uiActionRelatedObjectNames = {"page:Page"};
		addRelationIndex("UiAction",uiActionRelatedObjectNames);

		String [] sectionRelatedObjectNames = {"page:Page"};
		addRelationIndex("Section",sectionRelatedObjectNames);

		String [] userWhiteListRelatedObjectNames = {"domain:UserDomain"};
		addRelationIndex("UserWhiteList",userWhiteListRelatedObjectNames);

		String [] secUserRelatedObjectNames = {"domain:UserDomain"};
		addRelationIndex("SecUser",secUserRelatedObjectNames);

		String [] userAppRelatedObjectNames = {"sec_user:SecUser"};
		addRelationIndex("UserApp",userAppRelatedObjectNames);

		String [] quickLinkRelatedObjectNames = {"app:UserApp"};
		addRelationIndex("QuickLink",quickLinkRelatedObjectNames);

		String [] listAccessRelatedObjectNames = {"app:UserApp"};
		addRelationIndex("ListAccess",listAccessRelatedObjectNames);

		String [] loginHistoryRelatedObjectNames = {"sec_user:SecUser"};
		addRelationIndex("LoginHistory",loginHistoryRelatedObjectNames);

		String [] candidateElementRelatedObjectNames = {"container:CandidateContainer"};
		addRelationIndex("CandidateElement",candidateElementRelatedObjectNames);

		String [] wechatWorkappIdentityRelatedObjectNames = {"sec_user:SecUser"};
		addRelationIndex("WechatWorkappIdentity",wechatWorkappIdentityRelatedObjectNames);

		String [] wechatMiniappIdentityRelatedObjectNames = {"sec_user:SecUser"};
		addRelationIndex("WechatMiniappIdentity",wechatMiniappIdentityRelatedObjectNames);

		String [] keypairIdentityRelatedObjectNames = {"key_type:PublicKeyType","sec_user:SecUser"};
		addRelationIndex("KeypairIdentity",keypairIdentityRelatedObjectNames);

		String [] publicKeyTypeRelatedObjectNames = {"domain:UserDomain"};
		addRelationIndex("PublicKeyType",publicKeyTypeRelatedObjectNames);

	
	
	}
	protected static final String TRUST_CHAIN_READ = "R";
	protected static final String TRUST_CHAIN_WRITE = "W";
	protected static final String TRUST_CHAIN_MANAGEMENT = "M";
	protected static final String TRUST_CHAIN_EXECUTION = "X";
	
	protected static final String TRUST_READ = "r";
	protected static final String TRUST_WRITE = "w";
	protected static final String TRUST_MANAGEMENT = "m";
	protected static final String TRUST_EXECUTION = "x";
	
	protected static final String TRUST_CHAIN_ALL = "MXWR";
	
	
	//small 'r','w','m','x' mean no chain trust, just trust the same level
	//default for reading trust chain, the default sequence are MXWR, the order is not affect the result
	protected void prepareRelation()
	{
		addGenericRelation("Company"                               ,TRUST_CHAIN_READ,"platform");
		addGenericRelation("User"                                  ,TRUST_CHAIN_READ,"company");
		addGenericRelation("UserProject"                           ,TRUST_CHAIN_READ,"user");
		addGenericRelation("UserProject"                           ,TRUST_CHAIN_READ,"project");
		addGenericRelation("ChangeRequestType"                     ,TRUST_CHAIN_READ,"platform");
		addGenericRelation("ChangeRequest"                         ,TRUST_CHAIN_READ,"requestType");
		addGenericRelation("ChangeRequest"                         ,TRUST_CHAIN_READ,"platform");
		addGenericRelation("EventUpdateProfile"                    ,TRUST_CHAIN_READ,"changeRequest");
		addGenericRelation("Project"                               ,TRUST_CHAIN_READ,"company");
		addGenericRelation("PageFlowSpec"                          ,TRUST_CHAIN_READ,"owner");
		addGenericRelation("PageFlowSpec"                          ,TRUST_CHAIN_READ,"project");
		addGenericRelation("WorkFlowSpec"                          ,TRUST_CHAIN_READ,"owner");
		addGenericRelation("WorkFlowSpec"                          ,TRUST_CHAIN_READ,"project");
		addGenericRelation("ChangeRequestSpec"                     ,TRUST_CHAIN_READ,"owner");
		addGenericRelation("ChangeRequestSpec"                     ,TRUST_CHAIN_READ,"project");
		addGenericRelation("PageContentSpec"                       ,TRUST_CHAIN_READ,"owner");
		addGenericRelation("PageContentSpec"                       ,TRUST_CHAIN_READ,"project");
		addGenericRelation("Page"                                  ,TRUST_CHAIN_READ,"pageType");
		addGenericRelation("Page"                                  ,TRUST_CHAIN_READ,"mobileApp");
		addGenericRelation("PageType"                              ,TRUST_CHAIN_READ,"mobileApp");
		addGenericRelation("Slide"                                 ,TRUST_CHAIN_READ,"page");
		addGenericRelation("UiAction"                              ,TRUST_CHAIN_READ,"page");
		addGenericRelation("Section"                               ,TRUST_CHAIN_READ,"page");
		addGenericRelation("UserWhiteList"                         ,TRUST_CHAIN_READ,"domain");
		addGenericRelation("SecUser"                               ,TRUST_CHAIN_READ,"domain");
		addGenericRelation("UserApp"                               ,TRUST_CHAIN_READ,"secUser");
		addGenericRelation("QuickLink"                             ,TRUST_CHAIN_READ,"app");
		addGenericRelation("ListAccess"                            ,TRUST_CHAIN_READ,"app");
		addGenericRelation("LoginHistory"                          ,TRUST_CHAIN_READ,"secUser");
		addGenericRelation("CandidateElement"                      ,TRUST_CHAIN_READ,"container");
		addGenericRelation("WechatWorkappIdentity"                 ,TRUST_CHAIN_READ,"secUser");
		addGenericRelation("WechatMiniappIdentity"                 ,TRUST_CHAIN_READ,"secUser");
		addGenericRelation("KeypairIdentity"                       ,TRUST_CHAIN_READ,"keyType");
		addGenericRelation("KeypairIdentity"                       ,TRUST_CHAIN_READ,"secUser");
		addGenericRelation("PublicKeyType"                         ,TRUST_CHAIN_READ,"domain");
	
	}

	


}


